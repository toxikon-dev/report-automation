Imports System.Data.SqlClient
Imports System.Security.Principal

Partial Public Class AgarDiffusion
    Inherits System.Web.UI.Page

    Dim mySharePoint As New SharePoint
    Dim theStudyNumber As String
    Dim strDatabase As String
    Dim strUsername As String

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        Dim CurrentIdentity As WindowsIdentity = WindowsIdentity.GetCurrent

        Dim conStr As String = ConfigurationManager.ConnectionStrings("ToxikonConnectionString").ConnectionString
        Dim strScript As String = ""
        Dim sql As String
        sql = "Select txtUserRole from tblUsers where txtUsername = '" & Mid(CurrentIdentity.Name, InStr(CurrentIdentity.Name, "\") + 1) & "'"
        sql = "Select txtUserRole from tblUsers where txtUsername = 'Toxikon_DPS'"

        Dim sqlCon As New SqlConnection(conStr)
        Dim getOutcomeCommand As New SqlCommand(sql, sqlCon)
        Dim da As New SqlDataAdapter(getOutcomeCommand)
        Dim ds As New DataSet()

        sqlCon.Open()
        strDatabase = sqlCon.Database
        strUsername = CurrentIdentity.Name
        da.Fill(ds)
        If ds.Tables(0).Rows.Count = 0 Then
            Response.Redirect("error.aspx?E=User_Not_Found&S=AgarDiffusion.aspx&U=" & strUsername & "&D=" & strDatabase)
        ElseIf ds.Tables(0).Rows(0).Item(0).ToString = "DPS" Or ds.Tables(0).Rows(0).Item(0).ToString = "DE" Then
            'these are OK
        Else
            Response.Redirect("error.aspx?E=User_Not_Authorized&S=AgarDiffusion.aspx&U=" & strUsername & "&D=" & strDatabase)
        End If
        ds.Dispose()
        da.Dispose()
        getOutcomeCommand.Dispose()
        sqlCon.Close()
        sqlCon.Dispose()
    End Sub

    Protected Sub FormView1_PageIndexChanging(ByVal sender As Object, ByVal e As System.Web.UI.WebControls.FormViewPageEventArgs) Handles FormView1.PageIndexChanging

    End Sub

    Protected Sub Button1_Click(ByVal sender As Object, ByVal e As EventArgs) Handles Button1.Click
        StudyDropDownList.Enabled = False
        Button1.Enabled = False

        StudyDropDownList2.Enabled = True
        InsertCancelBeforeSelectButton.Visible = True

    End Sub

    Protected Sub InsertButton_Click(ByVal sender As Object, ByVal e As EventArgs)
        Dim theError As System.Exception

        Try
            FormView1.InsertItem(True)

        Catch theError
            Dim strScript As String = ""

            strScript = "<script>"
            If Strings.Left(theError.GetBaseException.Message, 35) = "Violation of PRIMARY KEY constraint" Then
                strScript &= "alert('Error Inserting Results. These results already exists. Select the study number from the drop down list at the top of the page.');"
            Else
                Dim strErrorText As String = ""
                strErrorText = theError.Message
                strErrorText = Replace(strErrorText, Chr(34), "'")
                strErrorText = Replace(strErrorText, Chr(13), " ")
                strErrorText = Replace(strErrorText, Chr(10), "")
                strScript &= "alert(" & Chr(34) & "Error inserting record. " & strErrorText & Chr(34) & ");"
            End If
            strScript &= "</script>"

            Try
                ClientScript.RegisterStartupScript(GetType(Page), "ClientSideScript", strScript)
            Catch ex As Exception
                Response.Write(ex.Message & "<br>" & ex.StackTrace)
            End Try

        End Try

        StudyDropDownList.DataBind()
        StudyDropDownList.Enabled = True
        StudyDropDownList.SelectedIndex = 0
        Button1.Enabled = True
        StudyDropDownList2.Enabled = False
        StudyDropDownList2.SelectedIndex = 0

        FormView1.ChangeMode(FormViewMode.Edit)

    End Sub

    Protected Sub InsertCancelButton_Click(ByVal sender As Object, ByVal e As EventArgs)

        theStudyNumber = Request.QueryString("Study")

        'if we get a querystring, return to that study
        If theStudyNumber <> "" Then
            Response.Redirect("studies.aspx?study=" & theStudyNumber)
        Else
            StudyDropDownList.Enabled = True
            StudyDropDownList.SelectedIndex = 0
            Button1.Enabled = True
            StudyDropDownList2.SelectedIndex = 0
            StudyDropDownList2.Enabled = False
            FormView1.ChangeMode(FormViewMode.Edit)
        End If
    End Sub

    Protected Sub UpdateCancelButton_Click(ByVal sender As Object, ByVal e As EventArgs)

        theStudyNumber = Request.QueryString("Study")

        'if we get a querystring, return to that study
        If theStudyNumber <> "" Then
            Response.Redirect("studies.aspx?study=" & theStudyNumber)
        Else
            StudyDropDownList.Enabled = True
            StudyDropDownList.SelectedIndex = 0
            Button1.Enabled = True
            FormView1.ChangeMode(FormViewMode.Edit)
        End If

    End Sub

    Protected Sub UpdateButton_Click(ByVal sender As Object, ByVal e As EventArgs)
        Dim conStr As String = ConfigurationManager.ConnectionStrings("ToxikonConnectionString").ConnectionString
        Dim strScript As String = ""
        Dim sql As String

        sql = "Select txtStatus from tblProjects where txtStudyNumber = '" & StudyDropDownList.SelectedValue & "'"

        Dim sqlCon As New SqlConnection(conStr)
        Dim getOutcomeCommand As New SqlCommand(sql, sqlCon)
        Dim da As New SqlDataAdapter(getOutcomeCommand)
        Dim ds As New DataSet()

        sqlCon.Open()
        da.Fill(ds)
        If ds.Tables(0).Rows(0).Item(0).ToString = "Waiting review" Or ds.Tables(0).Rows(0).Item(0).ToString = "Base info rejected" Or ds.Tables(0).Rows(0).Item(0).ToString = "" Then

            Dim theError As System.Exception
            Try
                FormView1.UpdateItem(True)
            Catch theError
                Dim strErrorText As String = ""
                strErrorText = theError.Message
                strErrorText = Replace(strErrorText, Chr(34), "'")
                strErrorText = Replace(strErrorText, Chr(13), " ")
                strErrorText = Replace(strErrorText, Chr(10), "")
                strScript = "<script>"
                strScript &= "alert(" & Chr(34) & "Error updating record. " & strErrorText & Chr(34) & ");"
                strScript &= "</script>"

                Try
                    ClientScript.RegisterStartupScript(GetType(Page), "ClientSideScript", strScript)
                Catch ex As Exception
                    Response.Write(ex.Message & "<br>" & ex.StackTrace)
                End Try

            End Try

            StudyDropDownList.Enabled = True
            StudyDropDownList.SelectedIndex = 0
            Button1.Enabled = True

            FormView1.ChangeMode(FormViewMode.Edit)
        Else
            strScript = "<script>"
            strScript &= "alert(" & Chr(34) & "The report for this study is in process. These changes will not bre reflected in the report. Save Cancelled." & Chr(34) & ");"
            strScript &= "</script>"
            ClientScript.RegisterStartupScript(GetType(Page), "ClientSideScript", strScript)
        End If

        ds.Dispose()
        da.Dispose()
        getOutcomeCommand.Dispose()
        sqlCon.Close()
        sqlCon.Dispose()
    End Sub

    Private Sub StudyDropDownList_DataBound(ByVal sender As Object, ByVal e As System.EventArgs) Handles StudyDropDownList.DataBound

        Dim theMode As String = "New"

        theStudyNumber = Request.QueryString("study")

        'if we get a querystring, select it in the dropdown and edit the record or start a new record
        If theStudyNumber <> "" Then           'And Not IsNothing(StudyDropDownList.Items.FindByText(theStudyNumber))
            For x = 0 To StudyDropDownList.Items.Count - 1
                If StudyDropDownList.Items(x).Text = theStudyNumber Then
                    StudyDropDownList.SelectedValue = theStudyNumber
                    StudyDropDownList.Enabled = False
                    Button1.Enabled = False
                    theMode = "Edit"
                    FormView1.ChangeMode(FormViewMode.Edit)
                    Exit For
                End If
            Next
            If theMode = "New" Then
                InsertCancelBeforeSelectButton.Visible = False
                StudyDropDownList2.Enabled = False
                FormView1.ChangeMode(FormViewMode.Insert)
            End If
        End If

    End Sub

    Private Sub StudyDropDownList_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles StudyDropDownList.SelectedIndexChanged

        StudyDropDownList.Enabled = False
        Button1.Enabled = False

    End Sub

    Private Sub StudyDropDownList2_DataBound(ByVal sender As Object, ByVal e As System.EventArgs) Handles StudyDropDownList2.DataBound

        theStudyNumber = Request.QueryString("Study")

        'if we get a querystring, select it in the dropdown and insert the record
        If theStudyNumber <> "" And Not IsNothing(StudyDropDownList2.Items.FindByText(theStudyNumber)) Then
            StudyDropDownList2.SelectedValue = theStudyNumber
            StudyDropDownList.Enabled = False
            Button1.Enabled = False
            FormView1.ChangeMode(FormViewMode.Insert)
        End If

    End Sub

    Protected Sub StudyDropDownList2_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles StudyDropDownList2.SelectedIndexChanged

        If StudyDropDownList2.SelectedValue <> "" Then
            InsertCancelBeforeSelectButton.Visible = False
            StudyDropDownList2.Enabled = False
            FormView1.ChangeMode(FormViewMode.Insert)
        End If

    End Sub

    Private Sub FormView1_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles FormView1.PreRender

        If FormView1.CurrentMode = FormViewMode.Insert Then
            Dim myControl As TextBox
            myControl = FormView1.FindControl("txtStudyNumberTextBox")
            If theStudyNumber = "" Then
                myControl.Text = StudyDropDownList2.SelectedValue
            Else
                myControl.Text = theStudyNumber
                StudyDropDownList2.SelectedValue = theStudyNumber
            End If
            myControl.Dispose()
        End If

    End Sub

    Protected Sub InsertCancelBeforeSelectButton_Click(ByVal sender As Object, ByVal e As EventArgs) Handles InsertCancelBeforeSelectButton.Click

        StudyDropDownList.Enabled = True
        StudyDropDownList.SelectedIndex = 0
        Button1.Enabled = True
        InsertCancelBeforeSelectButton.Visible = False
        StudyDropDownList2.SelectedIndex = 0
        StudyDropDownList2.Enabled = False
        FormView1.ChangeMode(FormViewMode.Edit)

    End Sub


    Protected Sub SubmitButton_Click(ByVal sender As Object, ByVal e As EventArgs)

        Dim conStr As String = ConfigurationManager.ConnectionStrings("ToxikonConnectionString").ConnectionString
        Dim strScript As String = ""
        Dim sql As String
        Dim mySponsor As String
        Dim myGUID As String

        sql = "Select txtStatus from tblProjects where txtStudyNumber = '" & StudyDropDownList.SelectedValue & "'"

        Dim sqlCon As New SqlConnection(conStr)
        Dim getOutcomeCommand As New SqlCommand(sql, sqlCon)
        Dim da As New SqlDataAdapter(getOutcomeCommand)
        Dim ds As New DataSet()

        sqlCon.Open()
        da.Fill(ds)
        If ds.Tables(0).Rows(0).Item(0).ToString = "Waiting review" Or ds.Tables(0).Rows(0).Item(0).ToString = "Base info rejected" Or ds.Tables(0).Rows(0).Item(0).ToString = "" Then

            Dim theError As System.Exception
            Try
                FormView1.UpdateItem(True)
            Catch theError
                Dim strErrorText As String = ""
                strErrorText = theError.Message
                strErrorText = Replace(strErrorText, Chr(34), "'")
                strErrorText = Replace(strErrorText, Chr(13), " ")
                strErrorText = Replace(strErrorText, Chr(10), "")
                strScript = "<script>"
                strScript &= "alert(" & Chr(34) & "Error updating record. " & strErrorText & Chr(34) & ");"
                strScript &= "</script>"

                Try
                    ClientScript.RegisterStartupScript(GetType(Page), "ClientSideScript", strScript)
                Catch ex As Exception
                    Response.Write(ex.Message & "<br>" & ex.StackTrace)
                End Try

            End Try

            getOutcomeCommand.CommandText = "update tblProjects set txtStatus = 'Waiting review' where txtStudyNumber = '" & StudyDropDownList.SelectedValue & "'"
            getOutcomeCommand.ExecuteNonQuery()

            getOutcomeCommand.CommandText = "Select txtSponsorName from tblSamples where txtSampleNumber = '" & Left(StudyDropDownList.SelectedValue, 7) & "'"
            da.SelectCommand = getOutcomeCommand
            ds.Clear()
            da.Fill(ds)
            If ds.Tables(0).Rows(0).Item(1).ToString = "" Then
                mySponsor = "Sponsor Not Found"
            Else
                mySponsor = ds.Tables(0).Rows(0).Item(1).ToString
            End If

            Dim myControl As TextBox
            Dim myAssignTo As String
            myControl = FormView1.FindControl("txtEmailTextBox")
            myAssignTo = myControl.Text
            myControl.Dispose()

            myGUID = mySharePoint.AddSPTask("SD Review, 09-ISO-Agar-Diffusion-G, " & StudyDropDownList.SelectedValue & ", " & mySponsor, "", "", myAssignTo, "Tasks")
            getOutcomeCommand.CommandText = "update tblProjects set txtActiveTaskGUID = '" & myGUID & "' where txtStudyNumber = '" & StudyDropDownList.SelectedValue & "'"
            getOutcomeCommand.ExecuteNonQuery()

            StudyDropDownList.DataBind()
            StudyDropDownList.Enabled = True
            StudyDropDownList.SelectedIndex = 0
            Button1.Enabled = True

            FormView1.ChangeMode(FormViewMode.Edit)

        Else
            strScript = "<script>"
            strScript &= "alert(" & Chr(34) & "The report for this study is in process. These changes will not bre reflected in the report. Save Cancelled." & Chr(34) & ");"
            strScript &= "</script>"
            ClientScript.RegisterStartupScript(GetType(Page), "ClientSideScript", strScript)
        End If
        ds.Dispose()
        da.Dispose()
        getOutcomeCommand.Dispose()
        sqlCon.Close()
        sqlCon.Dispose()

    End Sub

    Private Sub AgarDiffusion_PreRender(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.PreRender
        LabelUsername.Text = "User: " & strUsername
        LabelDB.Text = "Database: " & strDatabase & " SharePoint Site: " & My.Settings.SPSiteURL

    End Sub
End Class

